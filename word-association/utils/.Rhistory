library(mongolite)
library(tm)
library(dplyr)
library(ggplot2)
library(stringr)
library(lubridate)
library(anytime)
library(RMongo)
get_collection <- function(colecao, query = "{}"){
con <- mongo(db = "stocks", collection = colecao, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
data <- con$find(query)
rm(con)
return(data)
}
get_docs_by_idNoticia <- function(vetor_ids, colecao){
mongo = mongoDbConnect("stocks")
idNoticias = paste(vetor_ids, collapse = "\",\"")
query = sprintf('{"idNoticia": { "$in": ["%s"]} }', idNoticias)
output = dbGetQuery(mongo, colecao, query, skip=0, limit=Inf)
rm(mongo)
return(output)
}
get_todas_noticias_originais <- function(){
g1_noticias <- get_collection("g1Noticias")
folha_noticias <- get_collection("folhaNoticias")
estadao_noticias <- get_collection("estadaoNoticias")
noticias <- bind_rows(g1_noticias, folha_noticias, estadao_noticias)
anos_eleicao <- c(2010,2012,2014,2016)
noticias <- noticias %>% mutate(data = utcdate(timestamp), repercussao = as.integer(repercussao),
ano = year(data), mes = month(data, label=T, abbr=T), dia = day(data), dia_do_ano = yday(data),
is_ano_eleicao = if_else(ano %in% anos_eleicao, TRUE, FALSE))
n_palavras <- noticias %>% select(conteudo) %>%
unlist() %>% as.vector() %>%
tolower() %>% str_count(" ")+1
noticias <- cbind(noticias, n_palavras)
return(noticias)
}
get_todas_noticias_processadas <- function(){
folha_noticias <- get_collection("folhaNoticiasProcessadas")
estadao_noticias <- get_collection("estadaoNoticiasProcessadas")
g1_noticias <- get_collection("g1NoticiasProcessadas")
noticias <- bind_rows(folha_noticias, estadao_noticias, g1_noticias)
return(noticias)
}
get_todos_comentarios <- function(){
g1_comentarios <- get_collection("g1ComentariosProcessados")
folha_comentarios <- get_collection("folhaComentariosProcessados")
estadao_comentarios <- get_collection("estadaoComentariosProcessados")
comentarios <- bind_rows(g1_comentarios, folha_comentarios, estadao_comentarios)
return(comentarios)
}
insert_in_database <- function(colecao, nome){
con <- mongo(db = "stocks", collection = nome, url = "mongodb://localhost", verbose = FALSE, options = ssl_options())
con$insert(colecao)
rm(con)
}
get_comentarios_por_noticias = function(noticias, data_ini = NULL, data_fim = NULL, database = NULL){
noticias = noticias %>% select(idNoticia, data, subFonte)
get_comentarios = function(database){
if(is.null(database)){
return(get_todos_comentarios())
}
return(get_collection(database))
}
comentarios = get_comentarios(database)
comentarios = comentarios %>% filter(idNoticia %in% noticias$idNoticia) %>% rename(conteudo = comentario, conteudo_processado = comentario_processado)
comentarios = comentarios %>% inner_join(noticias, by="idNoticia")
comentarios = comentarios %>% mutate(subFonte = paste("Comentario",subFonte,sep="-"))
return(comentarios)
}
a <- get_collection("estadaoNoticiasProcessadas")
View(a)
a %>% write.csv("noticias_estadao.csv")
library("stats")
library("ggbiplot")
library("dplyr")
library("Rtsne")
library("ggplot2")
source("utils/mongo_utils.R")
source("utils/utils.R")
source("utils/create_word_embedding_utils.R")
source("utils/create_sets.R")
source("utils/search_top_rated_comments.R")
source("WEAT/weat.R")
noticias <- get_todas_noticias_processadas()
csv_name = "./../data/comentarios_folha_top_eleicao.csv"
a = read_csv(csv_name)
View(a)
cria_word_embedding_on_csv <- function(csv_name, complemento, analogias, respostas, n_layers = 300){
rename_binary_file = function(binary_file, new_named_binary_file){
file.rename(binary_file, new_named_binary_file)
}
modelo = train_word2vec(csv_name, threads = 8, vectors = n_layers)
binary_file_name = str_replace(csv_name, ".csv", ".bin")
### Regras que devem ser acertadas para validar embedding
if(!is.null(analogias)){
analogias = verifica_analogias(binary_file_name, analogias, respostas)
}
new_name = str_replace(csv_name, ".csv", "") %>% paste("_",complemento,".bin",sep="")
rename_binary_file(binary_file_name, new_name)
return(list(modelo = modelo, analogias = analogias))
}
read_csv(csv_name) %>% select(comentario_processado) %>% write_csv("comentarios_folha_top_eleicao_processados.csv")
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("comentarios_folha_top_eleicao_processados.csv")
csv_name = "./../data/comentarios_folha_bottom_eleicao.csv"
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("comentarios_folha_top_eleicao_processados.csv")
csv_name = "./../data/comentarios_folha_eleicao.csv"
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("comentarios_folha_top_eleicao_processados.csv")
csv_name = "./../data/noticias_eleicao_estadao.csv"
csv_name = "./../data/noticias_eleicao_estadao.csv"
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("noticias_eleicao_estadao_processados.csv")
csv_name = "./../data/noticias_eleicao_estadao.csv"
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("noticias_eleicao_estadao_processados.csv")
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("noticias_eleicao_folha_processados.csv")
csv_name = "./../data/noticias_eleicao_folha.csv"
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("noticias_eleicao_folha_processados.csv")
csv_name = "./../data/noticias_eleicao_folha.csv"
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("./../data/noticias_eleicao_folha_processados.csv")
csv_name = "./../data/comentarios_folha_bottom_eleicao.csv"
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("./../data/comentarios_folha_bottom_eleicao_processados.csv")
csv_name = "./../data/comentarios_folha_eleicao.csv"
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("./../data/comentarios_folha_eleicao_processados.csv")
csv_name = "./../data/comentarios_folha_top_eleicao.csv"
read_csv(csv_name) %>% select(conteudo_processado) %>% write_csv("./../data/comentarios_folha_top_eleicao_processados.csv")
library(readr)
library(wordVectors)
library(rword2vec)
library(dplyr)
library(stringr)
# args = commandArgs(TRUE)
# csv_name = as.character(args[1]) #noticias, comentarios, etc
# tema = as.character(args[2])
# path_saida = as.character(args[3])
analogias <- c("pt psdb dilma", "pt pv dilma","pt prtb dilma","pt psol dilma","pt psb dilma","pt psdc dilma","psdb pv aécio","psdb prtb aécio","psdb psol aécio","psdb psb aécio","psdb psdc aécio","pv prtb jorge","pv psol jorge","pv psb jorge","pv psdc jorge","prtb psol fidelix","prtb psb fidelix","prtb psdc fidelix","psol psb luciana","psol psdc luciana","psb psdc marina","dilma aécio rousseff","campos psb aécio","pt psdb petista")
respostas <- c("aécio","jorge","fidelix","luciana","marina","eymael","jorge","fidelix","luciana","marina","eymael","fidelix","luciana","marina","eymael","luciana","marina","eymael","marina","eymael","eymael","neves","psdb","tucano")
cria_word_embedding <- function(tema, n_layers = 300, analogias, respostas, noticias, texto_col, path_saida){
train_file = paste(path_saida,tema,".csv",sep="")
binary_file = paste(path_saida,tema,".bin",sep="")
noticias %>% select_(texto_col) %>% write_csv(train_file)
modelo <- train_word2vec(train_file, threads = 8, vectors = n_layers)
### Regras que devem ser acertadas para validar embedding
if(!is.null(analogias)){
analogias = verifica_analogias(binary_file, analogias, respostas)
}
file.remove(train_file)
return(list(modelo = modelo, analogias = analogias))
}
cria_word_embedding_on_csv <- function(csv_name, complemento, analogias, respostas, n_layers = 300){
rename_binary_file = function(binary_file, new_named_binary_file){
file.rename(binary_file, new_named_binary_file)
}
modelo = train_word2vec(csv_name, threads = 8, vectors = n_layers)
binary_file_name = str_replace(csv_name, ".csv", ".bin")
### Regras que devem ser acertadas para validar embedding
if(!is.null(analogias)){
analogias = verifica_analogias(binary_file_name, analogias, respostas)
}
new_name = str_replace(csv_name, ".csv", "") %>% paste("_",complemento,".bin",sep="")
rename_binary_file(binary_file_name, new_name)
return(list(modelo = modelo, analogias = analogias))
}
verifica_analogias <- function(bin_path, analogias, respostas){
# Verifica se a saida esperada de uma analogia corresponde a saida que o algoritmo esta retornando
# TRUE se a saida esperada eh igual ao do algoritmo, FALSE caso contrario
word2vec_resposta <- function(binary_file, analogia, saida_esperada){
word_analogy(file_name = binary_file, search_words = analogia) %>%
slice(1) %>%
select(word) %>%
.[[1]] %>%
as.character()
}
analogia_resposta <- data_frame(analogia = analogias, resposta_esperada = respostas) %>% rowwise() %>%
mutate(w2v_resposta = word2vec_resposta(bin_path, analogia, resposta_esperada), acertos = (resposta_esperada == w2v_resposta))
acuracia <- analogia_resposta %>%
count(acertos) %>%
mutate(freq = n / sum(n)) %>%
filter(acertos == T) %>% select(freq) %>%
as.numeric()
return(list(analogia_resposta = analogia_resposta, acuracia = acuracia))
}
for(i in 1:1){
cria_word_embedding_on_csv(csv_name, i, analogias, respostas)
}
csv_name = "./../data/comentarios_folha_bottom_eleicao_processados.csv"
for(i in 1:1){
cria_word_embedding_on_csv(csv_name, i, analogias, respostas)
}
for(i in 1:2){
cria_word_embedding_on_csv(csv_name, i, analogias, respostas)
}
