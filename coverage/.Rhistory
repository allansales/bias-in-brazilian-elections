legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
grid.arrange(
do.call(arrangeGrob, lapply(plots, function(x)
x + theme(legend.position="none"))),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
# plotting
p1 <- ggplot(coverage_bias_2010, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2010$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p2 <- ggplot(coverage_bias_2014, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2014$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p3 <- ggplot(coverage_bias_2018, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2018$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "ype")
p = grid_arrange_shared_legend(p1, p2, p3)
p
ggsave("coverage_bias.pdf", plot = p, device = "pdf", width = 4, height = 8)
setwd("~/workspace/PKDD/coverage-bias")
source("utils/mongo_utils.R")
source("utils/utils.R")
library("dplyr")
library("readr")
library("anytime")
library("stringr")
library("ggpubr")
library("gridExtra")
library("grid")
edit_news = function(news){
news = news %>% mutate(data = anydate(news$timestamp))
dates_list = news$data %>% str_split("-")
dates_frame = do.call(rbind, dates_list) %>% as_data_frame() %>% select(ano = V1, mes = V2, dia = V3)
#dia_do_ano = strftime(news$data, format = "%j")
news = news %>% bind_cols(dates_frame) %>% select(-timestamp) #, dia_do_ano = dia_do_ano
news$emissor = with(news, if_else(str_detect(emissor, "\n"), str_replace_all(emissor, "\n", ""), emissor))
return(news)
}
news_folha = get_collection("folhaNoticias", db = "news")
news_folha_timestamped = news_folha %>% filter(!is.na(timestamp)) %>% select(-dia, -mes, -ano, -data)
news_folha_dia_mes_ano = news_folha %>% filter(is.na(timestamp))
news_folha_dia_mes_ano$subFonte = "FOLHASP"
news_folha_dia_mes_ano$dia = news_folha_dia_mes_ano$dia %>% as.character()
news_folha_dia_mes_ano$mes = news_folha_dia_mes_ano$mes %>% as.character()
news_folha_dia_mes_ano$ano = news_folha_dia_mes_ano$ano %>% as.character()
news_folha_dia_mes_ano$data <- news_folha_dia_mes_ano$data %>% as.Date("%d/%m/%Y")
news_folha_dia_mes_ano$caderno = with(news_folha_dia_mes_ano, if_else(caderno == "poder", "politica",
if_else(caderno == "mercado", "economia",
if_else(caderno == "paraesporte", "esporte", caderno))))
# import your text data
news_folha = get_collection("folhaNoticias", db = "news")
news_folha_timestamped = news_folha %>% filter(!is.na(timestamp)) %>% select(-dia, -mes, -ano, -data)
news_folha_dia_mes_ano = news_folha %>% filter(is.na(timestamp))
news_folha_dia_mes_ano$subFonte = "FOLHASP"
news_folha_dia_mes_ano$dia = news_folha_dia_mes_ano$dia %>% as.character()
news_folha_dia_mes_ano$mes = news_folha_dia_mes_ano$mes %>% as.character()
news_folha_dia_mes_ano$ano = news_folha_dia_mes_ano$ano %>% as.character()
news_folha_dia_mes_ano$data <- news_folha_dia_mes_ano$data %>% as.Date("%d/%m/%Y")
news_folha_dia_mes_ano$caderno = with(news_folha_dia_mes_ano, if_else(caderno == "poder", "politica",
if_else(caderno == "mercado", "economia",
if_else(caderno == "paraesporte", "esporte", caderno))))
news_estadao = get_collection("estadaoNoticias", db = "news")
news_carta = get_collection("cartaNoticias", db = "news")
news_carta$dia = news_carta$dia %>% as.character()
news_carta$mes = news_carta$mes %>% as.character()
news_carta$ano = news_carta$ano %>% as.character()
news_carta$data <- news_carta$data %>% as.Date("%d/%m/%Y")
news = bind_rows(news_folha_timestamped, news_estadao)
news = edit_news(news)
news = bind_rows(news, news_carta, news_folha_dia_mes_ano) %>% select(-timestamp)
interest_data = news %>% filter(ano %in% c("2010","2014","2018"), caderno %in% c("politica","economia")) %>% select(-subTitulo, -emissor) %>% filter(str_length(conteudo) > 1)
write_csv("news_data.csv", interest_data)
write_csv(interest_data, "news_data.csv")
interest_data = read_csv("news_data.csv")
interest_data = read_csv("news_data.csv")
View(interest_data)
get_actual_value = function(search_word, year){
interest_data_year = interest_data %>% filter(ano %in% c(year))
total_news = interest_data_year %>% group_by(subFonte) %>% summarise(total = n())
news_of_entity = interest_data_year %>% noticias_tema(search_word, "titulo")
n_news_of_entity = news_of_entity %>% group_by(subFonte) %>% summarise(n_of_entity = n())
news = n_news_of_entity %>% inner_join(total_news)
news = news %>% mutate(actual = n_of_entity/total) %>% select(subFonte, actual)
return(news)
}
get_coverage_bias = function(year, search_words){
coverage_bias = data_frame()
for(search_word in search_words){
actual = get_actual_value(search_word, year)
expected_mean = actual$actual %>% mean()
expected_sd = actual$actual %>% sd()
coverage_bias_entity = actual %>% mutate(cb = (actual - expected_mean)/expected_sd, entity = search_word, year = year)
coverage_bias = coverage_bias %>% bind_rows(coverage_bias_entity)
}
return(coverage_bias)
}
#interest_data$subFonte = with(interest_data, if_else(subFonte == "FOLHASP", "FSP",
#                                                     if_else(subFonte == "ESTADAO", "Est","CC")))
#2010
year = "2010"
search_words_2010 = c("pt","psdb","pv","dilma","serra","marina")
coverage_bias_2010 = get_coverage_bias(year, search_words_2010)
coverage_bias_2010$entity_type = with(coverage_bias_2010, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2010, "coverage_bias_2010.csv")
#2014
year = "2014"
search_words_2014 = c("pt","dilma","psdb","aécio","psb","marina")
coverage_bias_2014 = get_coverage_bias(year, search_words_2014)
coverage_bias_2014$entity_type = with(coverage_bias_2014, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2014, "coverage_bias_2014.csv")
#2018
year = "2018"
search_words_2018 = c("pt","haddad","bolsonaro","rede","psl","marina","pdt","ciro")
coverage_bias_2018 = get_coverage_bias(year, search_words_2018)
coverage_bias_2018$entity_type = with(coverage_bias_2018, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2018, "coverage_bias_2018.csv")
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
grid.arrange(
do.call(arrangeGrob, lapply(plots, function(x)
x + theme(legend.position="none"))),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
# plotting
p1 <- ggplot(coverage_bias_2010, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2010$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p2 <- ggplot(coverage_bias_2014, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2014$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p3 <- ggplot(coverage_bias_2018, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2018$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "ype")
#ggarrange(p1, p2, p3, ncol = 1, nrow = 3)
p = grid_arrange_shared_legend(p1, p2, p3)
library("dplyr")
library("readr")
source("utils/utils.R")
get_actual_value = function(search_word, year){
interest_data_year = interest_data %>% filter(ano %in% c(year))
total_news = interest_data_year %>% group_by(subFonte) %>% summarise(total = n())
news_of_entity = interest_data_year %>% noticias_tema(search_word, "titulo")
n_news_of_entity = news_of_entity %>% group_by(subFonte) %>% summarise(n_of_entity = n())
news = n_news_of_entity %>% inner_join(total_news)
news = news %>% mutate(actual = n_of_entity/total) %>% select(subFonte, actual)
return(news)
}
get_coverage_bias = function(year, search_words){
coverage_bias = data_frame()
for(search_word in search_words){
actual = get_actual_value(search_word, year)
expected_mean = actual$actual %>% mean()
expected_sd = actual$actual %>% sd()
coverage_bias_entity = actual %>% mutate(cb = (actual - expected_mean)/expected_sd, entity = search_word, year = year)
coverage_bias = coverage_bias %>% bind_rows(coverage_bias_entity)
}
return(coverage_bias)
}
#interest_data$subFonte = with(interest_data, if_else(subFonte == "FOLHASP", "FSP",
#                                                     if_else(subFonte == "ESTADAO", "Est","CC")))
#2010
year = "2010"
search_words_2010 = c("pt","psdb","pv","dilma","serra","marina")
coverage_bias_2010 = get_coverage_bias(year, search_words_2010)
coverage_bias_2010$entity_type = with(coverage_bias_2010, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2010, "coverage_bias_2010.csv")
#2014
year = "2014"
search_words_2014 = c("pt","dilma","psdb","aécio","psb","marina")
coverage_bias_2014 = get_coverage_bias(year, search_words_2014)
coverage_bias_2014$entity_type = with(coverage_bias_2014, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2014, "coverage_bias_2014.csv")
#2018
year = "2018"
search_words_2018 = c("pt","haddad","bolsonaro","rede","psl","marina","pdt","ciro")
coverage_bias_2018 = get_coverage_bias(year, search_words_2018)
coverage_bias_2018$entity_type = with(coverage_bias_2018, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2018, "coverage_bias_2018.csv")
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
grid.arrange(
do.call(arrangeGrob, lapply(plots, function(x)
x + theme(legend.position="none"))),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
# plotting
p1 <- ggplot(coverage_bias_2010, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2010$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p2 <- ggplot(coverage_bias_2014, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2014$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p3 <- ggplot(coverage_bias_2018, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2018$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "ype")
#ggarrange(p1, p2, p3, ncol = 1, nrow = 3)
p = grid_arrange_shared_legend(p1, p2, p3)
p
p
setwd("~/workspace/PKDD/coverage-bias")
ggsave("coverage_bias.pdf", plot = p, device = "pdf", width = 4, height = 8)
source("utils/utils.R")
library("dplyr")
library("readr")
library("anytime")
library("stringr")
library("ggpubr")
library("gridExtra")
library("grid")
interest_data = read_csv("news_data.csv")
# Coverage Bias
get_actual_value = function(search_word, year){
interest_data_year = interest_data %>% filter(ano %in% c(year))
total_news = interest_data_year %>% group_by(subFonte) %>% summarise(total = n())
news_of_entity = interest_data_year %>% noticias_tema(search_word, "titulo")
n_news_of_entity = news_of_entity %>% group_by(subFonte) %>% summarise(n_of_entity = n())
news = n_news_of_entity %>% inner_join(total_news)
news = news %>% mutate(actual = n_of_entity/total) %>% select(subFonte, actual)
return(news)
}
get_coverage_bias = function(year, search_words){
coverage_bias = data_frame()
for(search_word in search_words){
actual = get_actual_value(search_word, year)
expected_mean = actual$actual %>% mean()
expected_sd = actual$actual %>% sd()
coverage_bias_entity = actual %>% mutate(cb = (actual - expected_mean)/expected_sd, entity = search_word, year = year)
coverage_bias = coverage_bias %>% bind_rows(coverage_bias_entity)
}
return(coverage_bias)
}
#2010
year = "2010"
search_words_2010 = c("pt","psdb","pv","dilma","serra","marina")
coverage_bias_2010 = get_coverage_bias(year, search_words_2010)
coverage_bias_2010$entity_type = with(coverage_bias_2010, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2010, "coverage_bias_2010.csv")
#2014
year = "2014"
search_words_2014 = c("pt","dilma","psdb","aécio","psb","marina")
coverage_bias_2014 = get_coverage_bias(year, search_words_2014)
coverage_bias_2014$entity_type = with(coverage_bias_2014, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2014, "coverage_bias_2014.csv")
#2018
year = "2018"
search_words_2018 = c("pt","haddad","bolsonaro","rede","psl","marina","pdt","ciro")
coverage_bias_2018 = get_coverage_bias(year, search_words_2018)
coverage_bias_2018$entity_type = with(coverage_bias_2018, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2018, "coverage_bias_2018.csv")
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
grid.arrange(
do.call(arrangeGrob, lapply(plots, function(x)
x + theme(legend.position="none"))),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
# plotting
p1 <- ggplot(coverage_bias_2010, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2010$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p2 <- ggplot(coverage_bias_2014, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2014$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p3 <- ggplot(coverage_bias_2018, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2018$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "ype")
#ggarrange(p1, p2, p3, ncol = 1, nrow = 3)
p = grid_arrange_shared_legend(p1, p2, p3)
ggsave("coverage_bias.pdf", plot = p, device = "pdf", width = 4, height = 8)
source("utils/utils.R")
library("dplyr")
library("readr")
library("stringr")
# library("anytime")
# library("ggpubr")
# library("gridExtra")
# library("grid")
interest_data = read_csv("news_data.csv")
# Coverage Bias
get_actual_value = function(search_word, year){
interest_data_year = interest_data %>% filter(ano %in% c(year))
total_news = interest_data_year %>% group_by(subFonte) %>% summarise(total = n())
news_of_entity = interest_data_year %>% noticias_tema(search_word, "titulo")
n_news_of_entity = news_of_entity %>% group_by(subFonte) %>% summarise(n_of_entity = n())
news = n_news_of_entity %>% inner_join(total_news)
news = news %>% mutate(actual = n_of_entity/total) %>% select(subFonte, actual)
return(news)
}
get_coverage_bias = function(year, search_words){
coverage_bias = data_frame()
for(search_word in search_words){
actual = get_actual_value(search_word, year)
expected_mean = actual$actual %>% mean()
expected_sd = actual$actual %>% sd()
coverage_bias_entity = actual %>% mutate(cb = (actual - expected_mean)/expected_sd, entity = search_word, year = year)
coverage_bias = coverage_bias %>% bind_rows(coverage_bias_entity)
}
return(coverage_bias)
}
#2010
year = "2010"
search_words_2010 = c("pt","psdb","pv","dilma","serra","marina")
coverage_bias_2010 = get_coverage_bias(year, search_words_2010)
coverage_bias_2010$entity_type = with(coverage_bias_2010, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2010, "coverage_bias_2010.csv")
#2014
year = "2014"
search_words_2014 = c("pt","dilma","psdb","aécio","psb","marina")
coverage_bias_2014 = get_coverage_bias(year, search_words_2014)
coverage_bias_2014$entity_type = with(coverage_bias_2014, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2014, "coverage_bias_2014.csv")
#2018
year = "2018"
search_words_2018 = c("pt","haddad","bolsonaro","rede","psl","marina","pdt","ciro")
coverage_bias_2018 = get_coverage_bias(year, search_words_2018)
coverage_bias_2018$entity_type = with(coverage_bias_2018, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2018, "coverage_bias_2018.csv")
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
grid.arrange(
do.call(arrangeGrob, lapply(plots, function(x)
x + theme(legend.position="none"))),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
# plotting
p1 <- ggplot(coverage_bias_2010, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2010$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p2 <- ggplot(coverage_bias_2014, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2014$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p3 <- ggplot(coverage_bias_2018, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2018$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "ype")
#ggarrange(p1, p2, p3, ncol = 1, nrow = 3)
p = grid_arrange_shared_legend(p1, p2, p3)
ggsave("coverage_bias.pdf", plot = p, device = "pdf", width = 4, height = 8)
source("utils/utils.R")
library("dplyr")
library("readr")
library("stringr")
library("ggplot2")
# library("anytime")
# library("ggpubr")
# library("gridExtra")
# library("grid")
interest_data = read_csv("news_data.csv")
# Coverage Bias
get_actual_value = function(search_word, year){
interest_data_year = interest_data %>% filter(ano %in% c(year))
total_news = interest_data_year %>% group_by(subFonte) %>% summarise(total = n())
news_of_entity = interest_data_year %>% noticias_tema(search_word, "titulo")
n_news_of_entity = news_of_entity %>% group_by(subFonte) %>% summarise(n_of_entity = n())
news = n_news_of_entity %>% inner_join(total_news)
news = news %>% mutate(actual = n_of_entity/total) %>% select(subFonte, actual)
return(news)
}
get_coverage_bias = function(year, search_words){
coverage_bias = data_frame()
for(search_word in search_words){
actual = get_actual_value(search_word, year)
expected_mean = actual$actual %>% mean()
expected_sd = actual$actual %>% sd()
coverage_bias_entity = actual %>% mutate(cb = (actual - expected_mean)/expected_sd, entity = search_word, year = year)
coverage_bias = coverage_bias %>% bind_rows(coverage_bias_entity)
}
return(coverage_bias)
}
#2010
year = "2010"
search_words_2010 = c("pt","psdb","pv","dilma","serra","marina")
coverage_bias_2010 = get_coverage_bias(year, search_words_2010)
coverage_bias_2010$entity_type = with(coverage_bias_2010, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2010, "coverage_bias_2010.csv")
#2014
year = "2014"
search_words_2014 = c("pt","dilma","psdb","aécio","psb","marina")
coverage_bias_2014 = get_coverage_bias(year, search_words_2014)
coverage_bias_2014$entity_type = with(coverage_bias_2014, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2014, "coverage_bias_2014.csv")
#2018
year = "2018"
search_words_2018 = c("pt","haddad","bolsonaro","rede","psl","marina","pdt","ciro")
coverage_bias_2018 = get_coverage_bias(year, search_words_2018)
coverage_bias_2018$entity_type = with(coverage_bias_2018, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2018, "coverage_bias_2018.csv")
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
grid.arrange(
do.call(arrangeGrob, lapply(plots, function(x)
x + theme(legend.position="none"))),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
# plotting
p1 <- ggplot(coverage_bias_2010, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2010$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p2 <- ggplot(coverage_bias_2014, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2014$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p3 <- ggplot(coverage_bias_2018, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2018$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "ype")
#ggarrange(p1, p2, p3, ncol = 1, nrow = 3)
p = grid_arrange_shared_legend(p1, p2, p3)
ggsave("coverage_bias.pdf", plot = p, device = "pdf", width = 4, height = 8)
library("gridExtra")
p = grid_arrange_shared_legend(p1, p2, p3)
library("grid")
p = grid_arrange_shared_legend(p1, p2, p3)
source("utils.R")
library("dplyr")
library("readr")
library("stringr")
library("ggplot2")
library("gridExtra")
library("grid")
# library("anytime")
# library("ggpubr")
interest_data = read_csv("news_data.csv")
# Coverage Bias
get_actual_value = function(search_word, year){
interest_data_year = interest_data %>% filter(ano %in% c(year))
total_news = interest_data_year %>% group_by(subFonte) %>% summarise(total = n())
news_of_entity = interest_data_year %>% noticias_tema(search_word, "titulo")
n_news_of_entity = news_of_entity %>% group_by(subFonte) %>% summarise(n_of_entity = n())
news = n_news_of_entity %>% inner_join(total_news)
news = news %>% mutate(actual = n_of_entity/total) %>% select(subFonte, actual)
return(news)
}
get_coverage_bias = function(year, search_words){
coverage_bias = data_frame()
for(search_word in search_words){
actual = get_actual_value(search_word, year)
expected_mean = actual$actual %>% mean()
expected_sd = actual$actual %>% sd()
coverage_bias_entity = actual %>% mutate(cb = (actual - expected_mean)/expected_sd, entity = search_word, year = year)
coverage_bias = coverage_bias %>% bind_rows(coverage_bias_entity)
}
return(coverage_bias)
}
#2010
year = "2010"
search_words_2010 = c("pt","psdb","pv","dilma","serra","marina")
coverage_bias_2010 = get_coverage_bias(year, search_words_2010)
coverage_bias_2010$entity_type = with(coverage_bias_2010, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2010, "coverage_bias_2010.csv")
#2014
year = "2014"
search_words_2014 = c("pt","dilma","psdb","aécio","psb","marina")
coverage_bias_2014 = get_coverage_bias(year, search_words_2014)
coverage_bias_2014$entity_type = with(coverage_bias_2014, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2014, "coverage_bias_2014.csv")
#2018
year = "2018"
search_words_2018 = c("pt","haddad","bolsonaro","rede","psl","marina","pdt","ciro")
coverage_bias_2018 = get_coverage_bias(year, search_words_2018)
coverage_bias_2018$entity_type = with(coverage_bias_2018, if_else(str_detect(entity,"p+") | entity == "rede", "party", "candidate"))
#write_csv(coverage_bias_2018, "coverage_bias_2018.csv")
grid_arrange_shared_legend <- function(...) {
plots <- list(...)
g <- ggplotGrob(plots[[1]] + theme(legend.position="bottom"))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
grid.arrange(
do.call(arrangeGrob, lapply(plots, function(x)
x + theme(legend.position="none"))),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight))
}
# plotting
p1 <- ggplot(coverage_bias_2010, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2010$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p2 <- ggplot(coverage_bias_2014, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2014$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "Type")
p3 <- ggplot(coverage_bias_2018, aes(x = entity, weight = cb, color = entity_type)) +
geom_bar(width = 0.5) + facet_wrap(~subFonte) + labs(x = "Entity", y = "Coverage Bias",
title = coverage_bias_2018$year %>% unique()) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(colour= "ype")
#ggarrange(p1, p2, p3, ncol = 1, nrow = 3)
p = grid_arrange_shared_legend(p1, p2, p3)
ggsave("coverage_bias.pdf", plot = p, device = "pdf", width = 4, height = 8)
